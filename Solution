7) EMPLOYEE BONUS
import pandas as pd

def employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:
    result_df=pd.merge(employee,bonus,left_on='empId',right_on='empId',how='left')
    df2= result_df[(result_df['bonus']<1000) | (result_df['bonus'].isna())]
    return df2[['name','bonus']]

------------------------------------------------------------------------------------------------------------------------
8) ARTICLE VIEWS I
import pandas as pd

def article_views(views: pd.DataFrame) -> pd.DataFrame:
    result_df=views[views['author_id']==views['viewer_id']].drop_duplicates(subset=['author_id'],keep='first').sort_values(by='author_id').rename(columns={'author_id':'id'})
    # result_df.drop_duplicates(subset=['author_id'],keep='first',inplace=True)
    # result_df.sort_values(by='author_id',inplace=True)
    # result_df.rename(columns={'author_id':'id'},inplace=True)
    return result_df[['id']]
------------------------------------------------------------------------------------------------------------------------
9) import pandas as pd

def invalid_tweets(tweets: pd.DataFrame) -> pd.DataFrame:
    return tweets[tweets['content'].str.len() > 15][['tweet_id']]
------------------------------------------------------------------------------------------------------------------------
10) import pandas as pd

def calculate_special_bonus(employees: pd.DataFrame) -> pd.DataFrame:
    employees['bonus']=employees.apply(lambda row: row['salary'] if row['employee_id']%2!=0 and not row['name'].startswith('M') else 0,axis=1)
    return employees.sort_values(by='employee_id')[['employee_id','bonus']]
------------------------------------------------------------------------------------------------------------------------
11) import pandas as pd

def fix_names(users: pd.DataFrame) -> pd.DataFrame:
    users['name']=users['name'].str.capitalize()
    return users.sort_values(by='user_id')
------------------------------------------------------------------------------------------------------------------------
12) import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:
    return patients[patients['conditions'].str.contains(r'(^|\s)DIAB1', regex=True)]
------------------------------------------------------------------------------------------------------------------------
13) import pandas as pd

def rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:
    results_df=products.melt(id_vars=['product_id'],value_vars=['store1','store2','store3'],var_name='store',value_name='price').dropna()
    return results_df
------------------------------------------------------------------------------------------------------------------------
14) import pandas as pd

def total_time(employees: pd.DataFrame) -> pd.DataFrame:
    employees['time_spent']=employees['out_time']-employees['in_time']
    return employees.groupby(['event_day','emp_id'])['time_spent'].sum().reset_index().rename(columns={'event_day':'day','time_spent':'total_time'})
------------------------------------------------------------------------------------------------------------------------
15) import pandas as pd

def count_unique_subjects(teacher: pd.DataFrame) -> pd.DataFrame:
    return teacher.drop_duplicates(subset=['teacher_id','subject_id']).groupby(['teacher_id'])['subject_id'].nunique().reset_index().rename(columns={'subject_id':'cnt'})
------------------------------------------------------------------------------------------------------------------------
16) import pandas as pd

def find_classes(courses: pd.DataFrame) -> pd.DataFrame:
    df=courses.groupby(['class'])[['student']].count().reset_index()
    return df[df['student']>=5][['class']]    
------------------------------------------------------------------------------------------------------------------------
17) import pandas as pd

def largest_orders(orders: pd.DataFrame) -> pd.DataFrame:
    df=orders.groupby(['customer_number'])[['order_number']].count().reset_index().rename(columns={'order_number':'order_count'})
    return df[df['order_count']==df['order_count'].max()][['customer_number']]

------------------------------------------------------------------------------------------------------------------------
18) import pandas as pd

def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:
    df=activities.groupby(['sell_date'])['product'].apply(lambda x:sorted(x.unique())).reset_index()
    df['num_sold']=df['product'].apply(len)
    df['products']=df['product'].apply(lambda x:','.join(x))
    df.drop(columns=['product'],inplace=True)
    return df
------------------------------------------------------------------------------------------------------------------------
19) import pandas as pd

def daily_leads_and_partners(daily_sales: pd.DataFrame) -> pd.DataFrame:
    return daily_sales.groupby(['date_id','make_name']).agg(
        unique_leads=('lead_id',lambda x:x.nunique()),
        unique_partners=('partner_id',lambda x: x.nunique())
        ).reset_index()
